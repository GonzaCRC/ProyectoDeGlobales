{"version":3,"sources":["../src/resolvers.js"],"names":["resolvers","Date","GraphQLScalarType","name","description","parseValue","value","serialize","parseLiteral","ast","kind","Kind","INT","Query","getUser","_","_user","User","findById","populate","getUsers","find","getOrganizer","_organizer","Organizer","Mutation","createOrganizer","imageUrl","organizer","create","posts","events","createOrganizerPost","post","Post","date","organizersWhoLiked","findByIdAndUpdate","_id","$push","useFindAndModify","createEvent","imagesUrls","organizerEvent","OrganizerEvent","usersEnrolled","createUser","user","friends","enrolledEvents","createUserPost","usersWhoLiked","addFriend","_friend","enrollEvent","_event","findOneAndUpdate","likeOrganizerPost","_post","likeUserPost"],"mappings":"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","sourcesContent":["import { User } from \"./models/People/User\";\r\nimport { Post } from \"./models/Post\";\r\nimport { Organizer } from \"./models/Bussiness/Organizer\";\r\nimport { OrganizerEvent } from \"./models/Bussiness/OrganizerEvent\";\r\nimport { GraphQLScalarType } from \"graphql\";\r\nimport { Kind } from \"graphql/language\";\r\n\r\nexport const resolvers = {\r\n  Date: new GraphQLScalarType({\r\n    name: \"Date\",\r\n    description: \"Date custom scalar type\",\r\n    parseValue(value) {\r\n      return new Date(value);\r\n    },\r\n    serialize(value) {\r\n      return value;\r\n    },\r\n    parseLiteral(ast) {\r\n      if (ast.kind === Kind.INT) {\r\n        return new Date(+ast.value);\r\n      }\r\n\r\n      return null;\r\n    },\r\n  }),\r\n  Query: {\r\n    getUser: async (_, { _user }) =>\r\n      await User.findById(_user)\r\n        .populate(\"friends\")\r\n        .populate(\"enrolledEvents\")\r\n        .populate(\"posts.usersWhoLiked\"),\r\n    getUsers: async () => await User.find(),\r\n    getOrganizer: async (_, { _organizer }) =>\r\n      await Organizer.findById(_organizer).populate(\"events.usersEnrolled\"),\r\n  },\r\n  Mutation: {\r\n    createOrganizer: async (_, { name, description, imageUrl }) => {\r\n      const organizer = await Organizer.create({\r\n        name: name,\r\n        description: description,\r\n        imageUrl: imageUrl,\r\n        posts: [],\r\n        events: [],\r\n      });\r\n\r\n      return organizer;\r\n    },\r\n    createOrganizerPost: async (_, { _organizer, description }) => {\r\n      const post = new Post({\r\n        date: new Date(),\r\n        description: description,\r\n        imageUrl: `www.images.com/${_organizer}`,\r\n        organizersWhoLiked: [],\r\n      });\r\n\r\n      await Organizer.findByIdAndUpdate(\r\n        { _id: _organizer },\r\n        { $push: { posts: post } },\r\n        { useFindAndModify: false }\r\n      );\r\n\r\n      return post;\r\n    },\r\n    createEvent: async (_, { _organizer, name, description, imagesUrls }) => {\r\n      const organizerEvent = new OrganizerEvent({\r\n        name: name,\r\n        description: description,\r\n        imagesUrls: imagesUrls,\r\n        usersEnrolled: [],\r\n      });\r\n\r\n      await Organizer.findByIdAndUpdate(\r\n        { _id: _organizer },\r\n        { $push: { events: organizerEvent } },\r\n        { useFindAndModify: false }\r\n      );\r\n\r\n      return organizerEvent;\r\n    },\r\n    createUser: async (_, { name }) => {\r\n      const user = await User.create({\r\n        name: name,\r\n        posts: [],\r\n        friends: [],\r\n        enrolledEvents: [],\r\n      });\r\n\r\n      return user;\r\n    },\r\n    createUserPost: async (_, { _user, description }) => {\r\n      const post = new Post({\r\n        date: new Date(),\r\n        description: description,\r\n        imageUrl: `www.images.com/${_user}`,\r\n        usersWhoLiked: [],\r\n      });\r\n\r\n      await User.findByIdAndUpdate(\r\n        { _id: _user },\r\n        { $push: { posts: post } },\r\n        { useFindAndModify: false }\r\n      );\r\n\r\n      return post;\r\n    },\r\n    addFriend: async (_, { _user, _friend }) => {\r\n      await User.findByIdAndUpdate(\r\n        { _id: _user },\r\n        { $push: { friends: _friend } },\r\n        { useFindAndModify: false }\r\n      );\r\n      await User.findByIdAndUpdate(\r\n        { _id: _friend },\r\n        { $push: { friends: _user } },\r\n        { useFindAndModify: false }\r\n      );\r\n\r\n      return true;\r\n    },\r\n    enrollEvent: async (_, { _user, _event }) => {\r\n      await User.findByIdAndUpdate(\r\n        { _id: _user },\r\n        { $push: { enrolledEvents: _event } },\r\n        { useFindAndModify: false }\r\n      );\r\n      await Organizer.findOneAndUpdate(\r\n        { \"events._id\": _event },\r\n        { $push: { \"events.$.usersEnrolled\": _user } },\r\n        { useFindAndModify: false }\r\n      );\r\n\r\n      return true;\r\n    },\r\n    likeOrganizerPost: async (_, { _user, _post }) => {\r\n      await Organizer.findOneAndUpdate(\r\n        { \"posts._id\": _post },\r\n        { $push: { \"posts.$.usersWhoLiked\": _user } },\r\n        { useFindAndModify: false }\r\n      );\r\n\r\n      return true;\r\n    },\r\n    likeUserPost: async (_, { _user, _post }) => {\r\n      await User.findOneAndUpdate(\r\n        { \"posts._id\": _post },\r\n        { $push: { \"posts.$.usersWhoLiked\": _user } },\r\n        { useFindAndModify: false }\r\n      );\r\n\r\n      return true;\r\n    },\r\n  },\r\n};\r\n\r\n// getFriends: async (_, { _user }) =>\r\n// await User.find({\r\n//   _id: {\r\n//     $in: User.findById(_user).friends,\r\n//   },\r\n// }),\r\n\r\n// getUsersEnrolled: async (_, { _event }) =>\r\n// await User.find({ enrolledEvents: _event })\r\n\r\n// getUsersWhoLikedPost: async (_, { _post }) =>\r\n// await User.find({\r\n//   _id: {\r\n//     $in: (await User.findOne({ \"posts._id\": _post })).posts.id(_post)\r\n//       .usersWhoLiked,\r\n//   },\r\n// })\r\n"],"file":"resolvers.js"}